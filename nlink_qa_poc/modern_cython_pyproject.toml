[build-system]
requires = [
    "setuptools>=64.0.0",
    "cython>=3.0.0",
    "numpy>=1.21.0",
    "wheel>=0.37.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "nlink-cython-marshal"
version = "1.1.0"
description = "NexusLink Zero-Overhead Marshalling - Cython Implementation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OBINexus Engineering Team", email = "engineering@obinexus.com"},
    {name = "Nnamdi Michael Okpala", email = "nnamdi@obinexus.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering :: Mathematics"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "typing-extensions>=4.0.0;python_version<'3.10'"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "mypy>=1.0.0",
    "cython-lint>=0.12.0"
]
test = [
    "pytest>=7.0.0",
    "numpy-testing>=1.0.0",
    "hypothesis>=6.0.0"
]
bench = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0"
]

[project.urls]
Homepage = "https://github.com/obinexus/nlink-poc"
Documentation = "https://docs.obinexus.com/nlink"
Repository = "https://github.com/obinexus/nlink-poc.git"
"Bug Tracker" = "https://github.com/obinexus/nlink-poc/issues"
"Funding" = "https://github.com/sponsors/obinexus"

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["nlink_marshal*"]

[tool.setuptools.package-data]
"nlink_marshal" = ["*.pyx", "*.pxd", "*.pxi"]

# Modern Cython configuration with optimization directives
[tool.cython]
language_level = "3str"
boundscheck = false
wraparound = false
initializedcheck = false
cdivision = true
embedsignature = true
optimize_simple_math = true
profile = false
linetrace = false

# Build-time optimization flags
[tool.cython.compile_time_env]
ENABLE_OPTIMIZATION = true
DEBUG_MODE = false
PROFILE_ENABLED = false

# Type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = "nlink_marshal.core_marshal"
ignore_errors = true  # Cython-generated code

# Code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=nlink_marshal",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as performance benchmarks",
    "cross_language: marks tests as cross-language compatibility tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["nlink_marshal"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
